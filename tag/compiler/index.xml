<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiler | 徐旭栋</title><link>/tag/compiler/</link><atom:link href="/tag/compiler/index.xml" rel="self" type="application/rss+xml"/><description>Compiler</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>Copyright © 2014 - 2021 Xudong Xu. 保留所有权利。</copyright><lastBuildDate>Sat, 26 Nov 2016 18:00:05 +0000</lastBuildDate><image><url>/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url><title>Compiler</title><link>/tag/compiler/</link></image><item><title>再谈 Swift Performance</title><link>/2016/11/26/%E5%86%8D%E8%B0%88-swift-performance/</link><pubDate>Sat, 26 Nov 2016 18:00:05 +0000</pubDate><guid>/2016/11/26/%E5%86%8D%E8%B0%88-swift-performance/</guid><description>&lt;p>随着 WWDC 2016 的离去，WWDC 2017 也已悄然竟接近，明年苹果将重回加州圣何塞 &lt;code>McEnery&lt;/code> 举办开发者大会，这个时候那些该展望的、还没展望的，也基本被讨论的差不多了，虽然在这个时间点来讨论 Swift Performance 虽然有些老生常谈，但也不失为一个好的话题。&lt;/p>
&lt;h2 id="class-与-struct-的取舍">&lt;code>class&lt;/code> 与 &lt;code>struct&lt;/code> 的取舍&lt;/h2>
&lt;p>什么情况下该用哪种 &lt;code>first class type&lt;/code> 来建立我们的 &lt;code>Model&lt;/code>，虽然各路英才心里自有图谱，但还是很有必要拉出来讨论一下。到底是用 &lt;code>class&lt;/code> 还是 &lt;code>struct&lt;/code>、用 &lt;code>value&lt;/code> 还是 &lt;code>reference&lt;/code> ，关键的约束点在于性能开销与多态的实现方式。&lt;/p>
&lt;h3 id="内存分配">内存分配&lt;/h3>
&lt;p>人尽皆知 &lt;code>heap&lt;/code> 比 &lt;code>stack&lt;/code> 更昂贵，&lt;code>heap&lt;/code> 牺牲了性能以换取比 &lt;code>stack&lt;/code> 更自由的内存管理，&lt;code>stack&lt;/code> 牺牲了复杂的数据结构来获取和 &lt;code>Int&lt;/code> 赋值一样快的 allocation。&lt;/p>
&lt;p>&lt;code>heap&lt;/code> 之所以昂贵、性能开销大，是因为开辟内存时需要考虑到多线程申请同一块内存 &lt;code>block&lt;/code> 而产生的竞争问题，因此首先需要加锁来达到 Thread Safety，然后，需要去找到未被使用使用的内存并申请初始化，用完了之后还得还回去将其 deallocate，而我们能得到的好处则是更加动态的内存生命周期。并且不像 C++，Swift 只能在堆上初始化 &lt;code>class&lt;/code>，对于 &lt;code>class&lt;/code> 选型的取舍显得尤其重要。&lt;/p>
&lt;p>反观 &lt;code>stack&lt;/code>，之所以其性能好是因为其开辟内存仅仅依赖于 &lt;code>ESP&lt;/code> 的上下移动，以典型自底向上的栈结构为例，一次函数调用所需要的 stack allocate 仅仅需要上移 &lt;code>ESP&lt;/code>，而当函数体结束时再把 &lt;code>ESP&lt;/code> 指回入栈之前的位置，上段内存自然就 deallocate 了。每个线程有自己的 &lt;code>stack&lt;/code>，不要考虑多线程加锁，也不需要考虑下一块内存是否可用。但限制在于，当执行一次完整的 &lt;code>call stack&lt;/code>，&lt;code>EBP&lt;/code> 的位置是固定的，意味着可以使用内存就这点，所以在栈上能做的事就被大大的限制，否则就等着 Overflow。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct Car {
var serial: Int
}
let car = Car(serial: 123456)
// Fake car, have a fake serial, which is equal to car.serial
let fakeCar = aCar
// do sth with car, fakeCar
&lt;/code>&lt;/pre>
&lt;p>这样一段代码在 &lt;code>stack&lt;/code> 上仅仅用了 2 个字的大小，用于存储两个 &lt;code>car&lt;/code> 的 &lt;code>serial&lt;/code>。就轻量级，开销低这些特点来说，在工程中用 &lt;code>struct&lt;/code> 来建模看上去是挺美滋滋的，但抛开多态单就性能来说，是否意味着 &lt;code>struct&lt;/code> 总是能成为 &lt;code>Modeling&lt;/code> 的首选？答案是否定的，当 &lt;code>struct&lt;/code> 遇见 &lt;code>ARC&lt;/code> 时，她就变得并不那么轻量级了。&lt;/p>
&lt;h3 id="arc">&lt;code>ARC&lt;/code>&lt;/h3>
&lt;p>Swift 对于 &lt;code>heap&lt;/code> 上实例的内存管理，采用的机制依旧是 &lt;code>ARC&lt;/code>。&lt;/p>
&lt;p>ARC 的在性能上的开销主要是在 &lt;code>swift_retain&lt;/code> &amp;amp; &lt;code>swift_release&lt;/code> 所产生的多次 &lt;code>indirection&lt;/code> 以及多线程的加锁保护。对于 &lt;code>trivial&lt;/code> 的 &lt;code>struct&lt;/code> 来说因为不涉及 &lt;code>ARC&lt;/code>，因此没有影响。但当 &lt;code>struct&lt;/code> 本身如果包含了需要 &lt;code>ARC&lt;/code> 的实例时，他就变得不那么高效了。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct Car {
var name: String
var model: String
}
let newCar = Car(name: &amp;quot;Tesla&amp;quot;, model: &amp;quot;Model S&amp;quot;)
let myCar = newCar
print(myCar.name)
&lt;/code>&lt;/pre>
&lt;p>就 &lt;code>Car&lt;/code> 来说，&lt;code>name&lt;/code> 和 &lt;code>model&lt;/code> 虽然是 &lt;code>String&lt;/code>， 是一个 &lt;code>struct&lt;/code>，但是 &lt;code>String&lt;/code> 的 &lt;code>underlying buffer storage&lt;/code> 是开辟在堆上的，需要和 &lt;code>Class&lt;/code> 一样的作 &lt;code>retain count&lt;/code>，所以会产生如下所示代码。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct Car {
var name: String
var model: String
}
let newCar = Car(name: &amp;quot;Tesla&amp;quot;, model: &amp;quot;Model S&amp;quot;)
let myCar = newCar
print(myCar.name)
swift_retain(myCar.name._storage)
swift_retain(myCar.model._storage)
swift_release(myCar.name._storage)
swift_release(myCar.model._storage)
swift_release(newCar.name._storage)
swift_release(newCar.model._storage)
&lt;/code>&lt;/pre>
&lt;p>过多的 &lt;code>retain&lt;/code> &amp;amp; &lt;code>release&lt;/code> 带来性能开销是我们不想看到的，而如果我们采用 &lt;code>class&lt;/code> 来实现则展开成如下形式。&lt;/p>
&lt;pre>&lt;code class="language-swift">class Car {
var name: String
var model: String
init(name: String, model: String) {
self.name = name
self.model = model
}
}
let newCar = Car(name: &amp;quot;Tesla&amp;quot;, model: &amp;quot;Model S&amp;quot;)
let myCar = newCar
swift_retain(myCar)
print(myCar.name)
swift_retain(myCar)
// ... do sth
swift_release(myCar)
swift_release(newCar)
&lt;/code>&lt;/pre>
&lt;p>在实际的过程中，&lt;code>Model&lt;/code> 显然不会这么简单，一个对象上有 10 几 20 个需要的 &lt;code>ARC&lt;/code> 的 &lt;code>property&lt;/code> 也不是不可能的，这时候谨慎使用 &lt;code>struct&lt;/code> 是我们需要注意的雷区。&lt;/p>
&lt;p>一个好的实践是多用 &lt;code>built-in&lt;/code> 的 &lt;code>type&lt;/code> 和结构来构建模型，比如 &lt;code>Car.model&lt;/code>，作为一个 &lt;code>String&lt;/code>，它其实没有很好的约束 &lt;code>Car.model&lt;/code> 所想表达的内容，它可以是任何字符串例如 &lt;code>Car.model = &amp;quot;foo&amp;quot;&lt;/code>，这是一个非常差的设计。因此如下所示，在这里我们可以采用 &lt;code>enum&lt;/code> 来对 &lt;code>model&lt;/code> 做约束。&lt;/p>
&lt;pre>&lt;code class="language-swift">extension Car {
enum Model {
case s
case x
}
}
struct Car {
var name: String
var model: Car.Model
}
&lt;/code>&lt;/pre>
&lt;p>虽然是一个很小的优化点，但结果即提高了语义的清晰度，又减少了不必要的开销，可谓一石双鸟。&lt;/p>
&lt;h2 id="多态">多态&lt;/h2>
&lt;p>&lt;code>Dyanmic Dispatch&lt;/code> 作为类多态实现的基础之一，也是讨论了比较多的话题，对于 &lt;code>class&lt;/code> 来说，编译器会给其添加额外的 &lt;code>field&lt;/code> 来储存 &lt;code>Type&lt;/code> 的信息，&lt;code>runtime&lt;/code> 通过 &lt;code>Type&lt;/code> 的 &lt;code>v-table&lt;/code> 来找到对应的方法，具体关于 &lt;code>Dynamic Dispatch&lt;/code> 的讨论可见之前的 &lt;a href="../whole-module-optimizations/">Whole Module Optimization 分析&lt;/a>，这里就不再赘述。&lt;/p>
&lt;p>回到 &lt;code>struct&lt;/code>，如果我们需要在 &lt;code>struct&lt;/code> 上实现多态，那就得依靠 &lt;code>protocol&lt;/code> 来实现。&lt;/p>
&lt;pre>&lt;code class="language-swift">protocol Turboable {
func turbo()
}
func turbo(_ stuffs: [Turboable]) {
stuffs.forEach {
$0.turbo()
}
}
struct Car {
var name: String
}
extension Car: Turboable {
func turbo() {
print(&amp;quot;turbo Car&amp;quot;)
}
}
struct Jet {
var name: String
}
extension Jet: Turboable {
func turbo() {
print(&amp;quot;turbo Jet&amp;quot;)
}
}
struct Tractor {
var name: String
var serail: Int
}
extension Tractor: Turboable {
func turbo() {
print(&amp;quot;turbo Tractor&amp;quot;)
}
}
let myStuffs: [Turboable] = [
Jet(name: &amp;quot;MiG-25&amp;quot;),
Car(name: &amp;quot;Chevrolet&amp;quot;),
Tractor(name: &amp;quot;Mercedes-Benz&amp;quot;,serial: 1)
]
turbo(myStuffs)
&lt;/code>&lt;/pre>
&lt;p>这是一段很常见的 &lt;code>Protocol Oriented Programming&lt;/code>，实际上这并不是没有额外性能开销的。和 &lt;code>Class&lt;/code> 不一样，通过 &lt;code>protocol&lt;/code> 实现的多态是通过 &lt;code>Protocol Witness Table&lt;/code> 来做 &lt;code>Dispatch&lt;/code>，每一个实现了 &lt;code>Turboable&lt;/code> 的类型，编译器都会生成一份 &lt;code>PWT&lt;/code>。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct JetPWT {
func turbo(_ jet: Jet) {
jet.turbo()
}
}
struct CarPWT {
func turbo(_ car: Car) {
car.turbo()
}
}
struct TractorPWT {
func turbo(_ tractor: Tractor) {
tractor.turbo()
}
}
&lt;/code>&lt;/pre>
&lt;p>同时对于 &lt;code>Array&lt;/code>，底层的 &lt;code>buffer&lt;/code> 显然更喜欢以固定的大小去连续的存储元素，而不同的 &lt;code>type&lt;/code> 却有着不同的内存布局，因此 Swift 使用了 &lt;code>Existential Containner&lt;/code> 去存储元素，这样一个容器提供了个三个字大小的 &lt;code>value Buffer&lt;/code> 用于存储元素。&lt;/p>
&lt;p>但如果元素的内存布局过大导致 &lt;code>value Buffer&lt;/code> 放不下，例如三个字对于 &lt;code>struct Jet&lt;/code> 足够大，但对于 &lt;code>struct Tractor&lt;/code>，因为 &lt;code>String&lt;/code>.&lt;code>size&lt;/code> + &lt;code>Int&lt;/code>.&lt;code>size&lt;/code> &amp;gt; 3 使得它无法存放在只有三个字大小的 &lt;code>buffer&lt;/code> 中。&lt;/p>
&lt;pre>&lt;code class="language-swift">// 24 bytes, 3 word
let jetSize = MemoryLayout&amp;lt;Jet&amp;gt;.size
// 32 bytes, 4 words
let tractorSize = MemoryLayout&amp;lt;Tractor&amp;gt;.size
&lt;/code>&lt;/pre>
&lt;p>因此 &lt;code>Existential Containner&lt;/code> 会在堆上开辟空间用来拷贝存储一份 &lt;code>Tractor&lt;/code>，同时将指针存放在 &lt;code>value Buffer&lt;/code> 中。&lt;/p>
&lt;p>所以调用 &lt;code>func turbo(_ stuffs: [Turboable])&lt;/code> 实际上绝大部分的性能开销都花费在对结构体进行内存分配上。&lt;/p>
&lt;p>同时，谈及了内存操作，不同的 &lt;code>type&lt;/code> 对应的内存布局是不同的，&lt;code>Existential Containner&lt;/code> 需要额外信息才能为这些 &lt;code>type&lt;/code> 做堆内存初始化、拷贝、释放，因此 Swift 引入了 &lt;code>Value Witness Table&lt;/code> 来管理 &lt;code>value type&lt;/code> 在堆上的生命周期。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct JetVWT {
// 在堆上初始化一块用于存放 Jet 的内存，并把地址赋给 Existential Containner
func allocate()
// 把 stack Jet 的内存 copy 到 heap 上
func copy()
// 用于 class type 引用计数递减
func destruct()
// 释放堆内存
func deallocate()
}
struct CarVWT {
...
}
struct TractorVWT {
...
}
&lt;/code>&lt;/pre>
&lt;p>因此 &lt;code>Existential Containner&lt;/code> 还需要额外的两个字的空间用来存放 &lt;code>PWT&lt;/code> 和 &lt;code>VWT&lt;/code> 的地址。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct ExistContTurboable {
var valueBuffer: (Int, Int, Int)
var vwt: ValueWitnessTable
var pwt: TurboableProtocolWitnessTable
}
&lt;/code>&lt;/pre>
&lt;p>通常来说 &lt;code>Existential Containner&lt;/code> 的大小是 5 个字。&lt;/p>
&lt;pre>&lt;code>// 40 bytes, 5 words
let turboableSize = MemoryLayout&amp;lt;Turboable&amp;gt;.size
&lt;/code>&lt;/pre>
&lt;p>虽然官方没声明，但是多个 &lt;code>protocol&lt;/code> 的情况下一份 &lt;code>pwt&lt;/code> 应该是不够的。&lt;/p>
&lt;pre>&lt;code class="language-swift">// 48 bytes, 6 words
let turboableSize = MemoryLayout&amp;lt;Turboable &amp;amp; CustomReflectable&amp;gt;.size
&lt;/code>&lt;/pre>
&lt;p>所以多个 &lt;code>protocol&lt;/code> 的结构会是如下所示的布局。&lt;/p>
&lt;pre>&lt;code class="language-swift">struct ExistContTurboableCustomReflectable {
var valueBuffer: (Int, Int, Int)
var vwt: ValueWitnessTable
var pwt: (TurboableProtocolWitnessTable, CustomReflectableWitnessTable)
}
&lt;/code>&lt;/pre>
&lt;p>以上整个流程实现了 &lt;code>protocol&lt;/code> 的 &lt;code>Dynamic Dispatch&lt;/code>，那么最终 &lt;code>func turbo(_ stuffs: [Turboable])&lt;/code> 会生成下文所示的伪代码。&lt;/p>
&lt;pre>&lt;code class="language-swift">
func turbo(val: [ExistContTurboable]) {
val.forEach { element in
// on the heap
var local = ExistContTurboable()
let vwt = element.vwt
let pwt = element.pwt
local.vwt = vwt
local.pwt = pwt
// 拷贝 local var 至 valueBuffer 或者堆上的内存
vwt.allocateBufferAndCopyValue(&amp;amp;local, element)
// 获取到 valueBuffer 或者堆上的实例
pwt.turbo(vwt.projectBuffer(&amp;amp;local))
// 清理现场
vwt.destructAndDeallocateBuffer()
}
}
&lt;/code>&lt;/pre>
&lt;p>相比于 &lt;code>class&lt;/code>，通过 &lt;code>protocol&lt;/code> 实现的 &lt;code>Dynamic Dispatch&lt;/code> 所带来的性能下降根据数据大小的不同可能高达数倍，并且不仅仅是 &lt;code>protocol type&lt;/code>，也包括了 &lt;code>stdlib&lt;/code> 中的一些函数。&lt;/p>
&lt;pre>&lt;code class="language-swift">public func max&amp;lt;T&amp;gt;(_ x: T, _ y: T) -&amp;gt; T where T : Comparable
&lt;/code>&lt;/pre>
&lt;p>这是一个很典型的范型函数，编译器在优化 Scope 被限制的条件下，会保守的生成符合所有 case 的函数。&lt;/p>
&lt;pre>&lt;code class="language-swift">public func max&amp;lt;T&amp;gt;(_ x: T, _ y: T, _ pwt: TypePWT, _ vwt: TypeVWT) -&amp;gt; T where T : Comparable
&lt;/code>&lt;/pre>
&lt;p>同样用到了 &lt;code>PWT&lt;/code> 和 &lt;code>VWT&lt;/code>，函数体的内部也同样用 &lt;code>valueBuffer&lt;/code> 来存储数据，一样是 3 个字的大小（苹果估计和 G 胖有仇），唯一的区别是没用 &lt;code>Existential Container&lt;/code> 到，因为这个对于每次调用只有一种 &lt;code>type&lt;/code> 的参数是没有必要的。&lt;/p>
&lt;p>当然这种通过范型实现的 &lt;code>Static Polymorphism&lt;/code> 仍然是 &lt;code>Dynamic Dispathc&lt;/code> 虽然对性能开销有影响，但是通过 &lt;code>Generic Specialization&lt;/code> 可以使其达到 &lt;code>Static Dispathc&lt;/code>，同样之前的 &lt;a href="../whole-module-optimizations/">Whole Module Optimization 分析&lt;/a> 有提及，所以不再赘述。&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
2017-07-14 Updated
&lt;/div>
&lt;/div>
&lt;p>在 WWDC 2017 上，苹果终于出手这个解决 &lt;code>valueBuffer&lt;/code> 的性能问题了，&lt;code>Unpredictable Performance Cliff&lt;/code>。苹果的方案是采用 &lt;code>COW Existential Buffers&lt;/code>，简单来说就是太大没法放进 &lt;code>valueBuffer&lt;/code> 的 value，苹果对其采用和类一样的 &lt;code>reference counting&lt;/code>，多个 &lt;code>Existential Container&lt;/code> 可以共享相同的 &lt;code>buffer&lt;/code> 直到这个 value 需要被修改才会被重新分配内存，以减少 &lt;code>heap allocation&lt;/code> 的次数，典型的 COW 机制。&lt;/p>
&lt;p>同样对于范型的 &lt;code>valueBuffer&lt;/code>，原来的 &lt;code>heap allocation&lt;/code> 被替换为 &lt;code>stack allocation&lt;/code>，规避了堆内存管理，这下可以更加肆无忌惮的使用范型和 &lt;code>protocol&lt;/code> 了。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>我们数据建模的方式小改动会对性能造成巨大的影响，所以在我们设计每一个代码环节时，我们都有这样思维，这段代码发生了什么、会产生怎么样的性能开销、内存是如何分配的。&lt;/p>
&lt;p>在工程中都应该根据实际场景仔细斟酌采取哪种机制来获取优雅的实现，并在此基础上对性能做优化，是需要 &lt;code>class&lt;/code> 的 OOP 特性，还是 &lt;code>struct&lt;/code> 的 value 特性，是需要 &lt;code>protocol&lt;/code> 的更加灵活的 &lt;code>Dynamic Polymorphism&lt;/code>，还是由范型带来的更加 &lt;code>static&lt;/code> 的 &lt;code>Static Polymorphism&lt;/code>。&lt;/p>
&lt;p>总之还是那句话，工欲善其事，必先利其器，了解你的编译器，这样才能让编译器更好的理解你。&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://developer.apple.com/videos/play/wwdc2016/416/" target="_blank" rel="noopener">Understanding Swift Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/videos/play/wwdc2017/402/" target="_blank" rel="noopener">What&amp;rsquo;s New in Swift 4&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://academy.realm.io/posts/goto-mike-ash-exploring-swift-memory-layout/" target="_blank" rel="noopener">Exploring Swift Memory Layout&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://academy.realm.io/posts/real-world-swift-performance/" target="_blank" rel="noopener">Real World Swift Performance&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Whole-Module Optimization 分析</title><link>/2016/07/14/whole-module-optimization-%E5%88%86%E6%9E%90/</link><pubDate>Thu, 14 Jul 2016 18:00:05 +0000</pubDate><guid>/2016/07/14/whole-module-optimization-%E5%88%86%E6%9E%90/</guid><description>&lt;p>Swift 自诞生以来，就标榜了 &lt;strong>Performance&lt;/strong>。WWDC 2015 上苹果为 Swift 2 引入的 Swift Compiler 特性 &lt;code>Whole-Module Optimization&lt;/code> 将其再一次拉上了 &lt;strong>Performance&lt;/strong> 的舞台，那么 &lt;code>WMO&lt;/code> 到底做了些什么？&lt;/p>
&lt;p>通常来说，Swift 文件是单独编译的，这样的编译模式不但可以充分发挥多核心的优势做到并行编译而且还能做到单文件维度的增量编译。&lt;/p>
&lt;pre>&lt;code class="language-mermaid">stateDiagram-v2
File1.swift --&amp;gt; Compiler
Compiler --&amp;gt; File1.o
File2.swift --&amp;gt; Compiler
Compiler --&amp;gt; File2.o
File3.swift --&amp;gt; Compiler
Compiler --&amp;gt; File3.o
&lt;/code>&lt;/pre>
&lt;p>这很合情也和很合理，用 Apple 的话来说就是&lt;/p>
&lt;blockquote>
&lt;p>That&amp;rsquo;s &lt;strong>good&lt;/strong> 😀&lt;/p>
&lt;/blockquote>
&lt;p>然而这样会把 Optimizer 能获取到的上下文局限在单个文件内，那么显而易见的问题是，整个模块内的死函数、&lt;code>Dynamic Dispatch&lt;/code> 的 &lt;code>V-Table&lt;/code> 查询、泛型特例化等等都无法被很好的优化，所以精益求精的 Apple 认为，这还是不够 &lt;strong>good&lt;/strong>，因此引入了 &lt;code>Whole-Moudle Optimization&lt;/code>。&lt;/p>
&lt;pre>&lt;code class="language-mermaid">stateDiagram-v2
File1.swift --&amp;gt; Compiler
File2.swift --&amp;gt; Compiler
File3.swift --&amp;gt; Compiler
Compiler --&amp;gt; File.o
&lt;/code>&lt;/pre>
&lt;p>&lt;code>WMO&lt;/code> 将整个模块的内的 Swift 文件合并成一个，把颗粒度提升到整个模块，这样可以做到在 Build Source 阶段，Optimizer 只进行一次模块级别的优化，用 Apple 的话来说就是：&lt;/p>
&lt;blockquote>
&lt;p>Analyze everything at once, aggressive optimization, very &lt;strong>good&lt;/strong> 😀&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>WMO&lt;/code> 对于 Swift 所能带来的提升官方称有 2x ~ 5x，如此 &lt;strong>good&lt;/strong> 的性能提升使得从 Xcode 8 开始 WMO 就成为了默认标配，所以 &lt;code>WMO&lt;/code> 快在哪？&lt;/p>
&lt;h3 id="泛型特例化">泛型特例化&lt;/h3>
&lt;p>以 &lt;a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Algorithm.swift" target="_blank" rel="noopener">stdlib&lt;/a> 中的函数为例。&lt;/p>
&lt;pre>&lt;code>// File1.swift
@_inlineable
public func max&amp;lt;T : Comparable&amp;gt;(_ x: T, _ y: T) -&amp;gt; T {
// In case `x == y`, we pick `y`. See min(_:_:).
return y &amp;gt;= x ? y : x
}
&lt;/code>&lt;/pre>
&lt;p>由于是泛型，编译器无从知道 &lt;code>type T&lt;/code> 具体类型是 &lt;code>Int&lt;/code>、&lt;code>Double&lt;/code> 还是其它任何 &lt;code>Comparable&lt;/code> 的类型，所以编译器会去函数表里找类型匹配函数， 同时编译器也无从知道 &lt;code>type T&lt;/code> 是否需要为其 &lt;code>reference counting&lt;/code>(e.g &lt;code>class Foo: Comparable&lt;/code>)，所以为了应付所有可能的 &lt;code>type T&lt;/code> 情况下，编译器会保守的生成如下伪代码。&lt;/p>
&lt;pre>&lt;code>// File1.swift
@_inlineable
func max&amp;lt;T : Comparable&amp;gt;(x: T, y: T, FTable: FunctionTable) -&amp;gt; T {
let xCopy = FTable.copy(x)
let yCopy = FTable.copy(y)
let ret = !FTable.lessThan(yCopy, xCopy) ? y : x
FTable.release(x)
FTable.release(y)
return ret
}
&lt;/code>&lt;/pre>
&lt;p>然而在 &lt;code>runtime&lt;/code> 时期，对于诸如 Int 这类的基本类型来说，编译器插入的 &lt;code>copy()&lt;/code>、&lt;code>release()&lt;/code> 是毫无意义却又是确实存在的，所以和 &lt;code>Template Specialization&lt;/code> 类似，Swift Compiler 引入了 &lt;code>Generic Specialization&lt;/code>。&lt;/p>
&lt;pre>&lt;code>// File1.swift
func foo() {
let x: Int = ...
let y: Int = ...
let ret = max(x, y)
...
}
&lt;/code>&lt;/pre>
&lt;p>在这样一个上下文内，&lt;code>Compiler&lt;/code> 能清楚的得知 &lt;code>type T = Int&lt;/code>，因此 &lt;code>max&amp;lt;T&amp;gt;&lt;/code> 会被拷贝并被特例化成 &lt;code>max&amp;lt;Int&amp;gt;&lt;/code>。&lt;/p>
&lt;pre>&lt;code>func max&amp;lt;Int&amp;gt;(x: Int, y: Int) -&amp;gt; Int {
return y &amp;lt; x ? x : y
}
&lt;/code>&lt;/pre>
&lt;p>然而问题是在如下的情况也是大部分工程中最常见的情况下，对于 File1.swift 来说 File2.Swift 在编译期是不可见的，&lt;code>Generic Specialization&lt;/code> 也因此失去了作用。&lt;/p>
&lt;pre>&lt;code>// Module Foo
// File1.swift
@_inlineable
public func max&amp;lt;T : Comparable&amp;gt;(_ x: T, _ y: T) -&amp;gt; T {
// In case `x == y`, we pick `y`. See min(_:_:).
return y &amp;gt;= x ? y : x
}
// File2.swift
func bar() {
let x: Int = ...
let y: Int = ...
let ret = max(x, y)
...
}
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>It&amp;rsquo;s not &lt;strong>good&lt;/strong> 🙁.&lt;/p>
&lt;/blockquote>
&lt;p>就时候就能体现出 &lt;code>WMO&lt;/code> 的优势，颗粒度上升至模块之后，File1，File2 会被合并，所有 Source 处于同一上下文，因此编译器有足够的信息去优化生成成如下 high &lt;strong>perfromace&lt;/strong> 的代码。&lt;/p>
&lt;pre>&lt;code>// Module Foo
// Foo-Merged.swift
@_inlineable
public func max&amp;lt;Int&amp;gt;(_ x: Int, _ y: Int) -&amp;gt; Int {
return y &amp;gt;= x ? y : x
}
func bar() {
let x: Int = ...
let y: Int = ...
let ret = max&amp;lt;T&amp;gt;(x, y)
...
}
&lt;/code>&lt;/pre>
&lt;h3 id="dynamic-dispatch">Dynamic Dispatch&lt;/h3>
&lt;p>假设有一个 &lt;code>class Car&lt;/code>。&lt;/p>
&lt;pre>&lt;code>// Module A
// File1.Swift
class Car {
// should not override
var brand: String
func turboCharge()
// turboCharge implementation, called by turboCharge(), should not override
func turboChargeImpl()
}
// File1.swift
class Porsche: Car {
var model: String
override func turboCharge()
// 对于子类，任何继承于父类的非 private func、property 都是以 Dynamic Dispatch
// 的形式调用的，即使没有被 override
// assumed to be overridden by compiler
// func turboChargeImpl()
}
&lt;/code>&lt;/pre>
&lt;p>然后我们有个 &lt;code>class Driver&lt;/code>。&lt;/p>
&lt;pre>&lt;code>// File2.swift
class Driver {
var name: String
func turbo(of car: Car) {
print(&amp;quot;Strat turbo of \(car.brand)&amp;quot;)
car.turboCharge()
}
}
&lt;/code>&lt;/pre>
&lt;p>那么对于 &lt;code>Driver.turbo&lt;/code> 编译器会生成如下伪代码。&lt;/p>
&lt;pre>&lt;code>class Driver {
···
func turbo(a car: Car) {
let brandGetter = Car.brandGetter(car)
print(&amp;quot;Strat turbo of \(brandGetter(car))&amp;quot;)
let turboCharge = Car.turboCharge(car)
turboCharge(car)
}
···
}
&lt;/code>&lt;/pre>
&lt;p>由于局限于单文件 &lt;code>Scope&lt;/code>，编译器无从得知所给到类的层级信息，自然无法得知有哪些 &lt;code>property&lt;/code>，&lt;code>func&lt;/code> 是被 &lt;code>override&lt;/code>的，所以编译器必须插入间接运算以完成 &lt;code>Dynamic Dispatch&lt;/code>。对于不会被 &lt;code>override&lt;/code> 的 &lt;code>Car.brand&lt;/code>、&lt;code>Car.turboChargeImpl&lt;/code>，可以通过 &lt;code>final&lt;/code> 限制子类的 &lt;code>override&lt;/code> 或者通过 &lt;code>private&lt;/code> 限制子类的 &lt;code>Access Control&lt;/code> 来达到 &lt;code>Static Dispatch&lt;/code>。&lt;/p>
&lt;pre>&lt;code>class Car {
···
final var brand: String
private func turboChargeImpl()
}
&lt;/code>&lt;/pre>
&lt;p>于是编译器就会生成如下伪代码。&lt;/p>
&lt;pre>&lt;code>class Driver {
···
func turbo(a car: Car) {
print(&amp;quot;Strat turbo of \(car.brand)&amp;quot;)
let turboCharge = Car.turboCharge(car)
turboCharge(car)
}
···
}
&lt;/code>&lt;/pre>
&lt;p>回到 &lt;code>WMO&lt;/code>，在上文基础上，假设有这样一个情景。&lt;/p>
&lt;pre>&lt;code>// Module A
// File2.swift
class Driver {
···
func turbo(a porsche: Porsche) {
porsche.turbo()
}
···
}
&lt;/code>&lt;/pre>
&lt;p>这样一段代码会被改写成如下。&lt;/p>
&lt;pre>&lt;code>class Driver {
···
func turbo(a porsche: Porsche) {
let turboCharge = Porsche.turboCharge(porsche)
turboCharge(car)
}
···
}
&lt;/code>&lt;/pre>
&lt;p>在 &lt;code>class Prosche&lt;/code> 没有任何 &lt;code>subclass&lt;/code> 的情况下，&lt;code>Dynamic Dispatch&lt;/code> 实际上是毫无意义的，因此 &lt;code>WMO&lt;/code> 又一次发挥了作用，把 Visibility 提升到整个模块之后 Compiler 能理解 &lt;code>Prosche&lt;/code> 的类层级、并且 &lt;code>Prosche&lt;/code> 没有子类，因此 &lt;code>func turbo(a porsche: Porsche)&lt;/code> 是完全 Static 的，所以代码最终会被改写成如下。&lt;/p>
&lt;pre>&lt;code>// Module A
// A-Merged.Swift
class Car {
final var brand: String
func turboCharge()
private func turboChargeImpl()
}
class Porsche: Car {
final var model: String
override func turboCharge()
}
class Driver {
func turbo(a car: Car) {
print(&amp;quot;Strat turbo of \(car.brand)&amp;quot;)
let turboCharge = Car.turboCharge(car)
turboCharge(car)
}
func turbo(a porsche: Porsche) {
porsche.turbo()
}
}
&lt;/code>&lt;/pre>
&lt;p>相比于 objc 的一切皆动态，Swift 在编译器能获得丰富的信息去避免 &lt;code>Dynamic Dispatch&lt;/code> 这也为什么 Swift 在 Object-Oriented Benchmark 上能秒杀 objc，可见一个设计优良的 &lt;code>class&lt;/code> 不仅在工程易维护性上带来许多方便，同时在性能上也能获得巨大的收益。&lt;/p>
&lt;h2 id="wmo-的适用范围">&lt;code>WMO&lt;/code> 的适用范围&lt;/h2>
&lt;p>但就如上文所说的，&lt;code>WMO&lt;/code> 下增量编译颗粒度上升至整个模块，意味着不管修改哪个文件，下一次 build 总是 Whole-Module build，大大增加了 build time，虽然 &lt;code>WMO&lt;/code> 带来的 clean build 时间缩短是可观的，但和 &lt;code>-Onone&lt;/code>、&lt;code>SFO&lt;/code> 下的增量编译相比并不在一个量级，所以这对于日常的开发是没有必要的，因此 &lt;code>WMO&lt;/code> 作为标配来说也仅仅是在 release build 的情况下，它并不是无敌的。&lt;/p>
&lt;p>&lt;img src="./wmo.png" alt="wmo">&lt;/p>
&lt;p>同时在开启了优化的情况下，&lt;code>LLDB&lt;/code> 也会表现的不正常&lt;/p>
&lt;pre>&lt;code>MyApp was compiled with optimization - stepping may behave oddly; variables may not be available.
&lt;/code>&lt;/pre>
&lt;p>所以，如果有无法避免的理由需要在 &lt;strong>Debug&lt;/strong> 情况下要用到 &lt;code>WMO&lt;/code>，那么&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Debug&lt;/strong> 下打开 &lt;code>WMO&lt;/code>，&lt;code>Other Swift Flags&lt;/code> 里添加 &lt;code>-Onone&lt;/code>&lt;/li>
&lt;li>&lt;strong>Debug&lt;/strong> 下关闭 &lt;code>WMO&lt;/code>，&lt;code>User-Defined&lt;/code> 里添加 &lt;code>SWIFT_WHOLE_MODULE_OPTIMIZATION&lt;/code> = &lt;code>YES&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>以上两种方式都可以把所有文件合并，且不做任何编译优化，减少了 Context 的分析，不但能够 Debug，而且相比于 &lt;code>Whole-Module Optimization&lt;/code> 还可以达到更快的编译速度。对于 CocoaPods 引入的 Swift framework，可以在 hook 里为每个 target 做配置。&lt;/p>
&lt;pre>&lt;code class="language-ruby">post_install do |installer|
installer.pods_project.targets.each do |target|
target.build_configurations.each do |config|
if config.name == 'Debug'
config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Owholemodule'
config.build_settings['OTHER_SWIFT_FLAGS'] = '-Onone $(inherited)'
end
end
end
end
&lt;/code>&lt;/pre>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>&lt;code>WMO&lt;/code> 的情况下，配合良好的代码设计会给予整个工程带来不容忽视的收益，用 Apple 的话来说就是：&lt;/p>
&lt;blockquote>
&lt;p>All I need to do is to turn on Whole-Module Optimization. I don&amp;rsquo;t need to change code at all. By giving the compiler more information, by allowing the compiler to understand my class hierachy with more information, I was able to get this optimization for &lt;strong>free&lt;/strong> without any work on your part.&lt;/p>
&lt;/blockquote>
&lt;h2 id="进一步了解">进一步了解&lt;/h2>
&lt;ol start="0">
&lt;li>&lt;a href="https://swift.org/blog/whole-module-optimizations/" target="_blank" rel="noopener">Whole-Module Optimization in Swift 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/videos/play/wwdc2015/409/" target="_blank" rel="noopener">Optimizing Swift Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://developear.com/blog/2016/12/30/Speed-Swift-Compilation.html" target="_blank" rel="noopener">Speeding Up Compile Times of Swift Projects&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.skilled.io/u/swiftsummit/swift-with-a-hundred-engineers" target="_blank" rel="noopener">Swift with a hundred engineers&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://nondot.org/sabre/" target="_blank" rel="noopener">Chris Lattner&amp;rsquo;s Homepage&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Clang Attributes 使用文档</title><link>/2015/11/28/clang-attributes-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</link><pubDate>Sat, 28 Nov 2015 15:44:16 +0000</pubDate><guid>/2015/11/28/clang-attributes-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Continually Updated
&lt;/div>
&lt;/div>
&lt;p>&lt;code>__attribute__&lt;/code> 最初作为 GNU C 的特性，为 C/C++、Objective-C/C++ 提供了编译器级别的标注，用来修饰一个变量、函数或类型，包括但不限于以下特性。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html" target="_blank" rel="noopener">Function Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Attributes.html" target="_blank" rel="noopener">Variable Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html" target="_blank" rel="noopener">Type Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html" target="_blank" rel="noopener">Label Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html" target="_blank" rel="noopener">Enumerator Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html" target="_blank" rel="noopener">Statement Attributes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>同样 Clang 也很好的兼容了 GGC 这一特性，并做了额外的扩展。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#calling-conventions" target="_blank" rel="noopener">Calling Conventions&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#nullability-attributes" target="_blank" rel="noopener">Nullability Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#amd-gpu-attributes" target="_blank" rel="noopener">AMD GPU Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#consumed-annotation-checking" target="_blank" rel="noopener">Consumed Annotation Checking&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#type-safety-checking" target="_blank" rel="noopener">Type Safety Checking&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html#opencl-address-spaces" target="_blank" rel="noopener">OpenCL Address Spaces&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://clang.llvm.org/docs/AttributeReference.html#customizing-swift-import" target="_blank" rel="noopener">Customizing Swift Import&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>诸如优化、错误检查之类的机械化任务理应由编译器去完成，但常言道“工欲善其事，必先利其器”只有让编译器更加懂你，才能把编译器的性能、优化发挥到极致。&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">目录&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#variable-attributes">Variable Attributes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#noescape">&lt;code>noescape&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#section-__declspecallocate">&lt;code>section, __declspec(allocate)&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#used">&lt;code>used&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#type-attributes">Type Attributes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#objc_root_class">&lt;code>objc_root_class&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#function-attributes">Function Attributes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#overloadable">&lt;code>overloadable&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#customizing-swift-import">Customizing Swift Import&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#swift_bridge">&lt;code>swift_bridge&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#swift_bridged">&lt;code>swift_bridged&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#swift_name">&lt;code>swift_name&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#swift_newtype">&lt;code>swift_newtype&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#进一步了解">进一步了解&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="variable-attributes">Variable Attributes&lt;/h2>
&lt;h3 id="noescape">&lt;code>noescape&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>noescape&lt;/code>&lt;/td>
&lt;td>&lt;code>clang::noescape&lt;/code>&lt;/td>
&lt;td>&lt;code>clang::noescape&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="section-__declspecallocate">&lt;code>section, __declspec(allocate)&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>section&lt;/code>&lt;/td>
&lt;td>&lt;code>gnu::section&lt;/code>&lt;/td>
&lt;td>&lt;code>gnu::section&lt;/code>&lt;/td>
&lt;td>&lt;code>allocate&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>section&lt;/code> 特性使得我们能将指定的变量或者函数插入到指定 section 中，比如把一个字符串直接塞入数据段。&lt;/p>
&lt;pre>&lt;code class="language-c">char *string __attribute((section(&amp;quot;__DATA, Custom&amp;quot;))) = &amp;quot;I'm a pure string.&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="used">&lt;code>used&lt;/code>&lt;/h3>
&lt;p>&lt;code>__attribute((used))&lt;/code> 用来修饰变量或者函数。通常默认情况下，没有被引用的符号会被链接器优化去除。标注 &lt;code>used&lt;/code> 之后意味着即使符号没有被引用，也不会被连接器优化掉。&lt;/p>
&lt;h2 id="type-attributes">Type Attributes&lt;/h2>
&lt;h3 id="objc_root_class">&lt;code>objc_root_class&lt;/code>&lt;/h3>
&lt;p>在 &lt;code>Foundation&lt;/code> 中对应 &lt;code>OBJC_ROOT_CLASS&lt;/code>，&lt;code>__attribute__((objc_root_class))&lt;/code> 用于申明一个没有根类的 objc class，我们可以利用这个特性实现类似 &lt;code>name space&lt;/code> 的效果，使得 ObjC 变得更 Swift。&lt;/p>
&lt;pre>&lt;code class="language-objc">__attribute__((objc_root_class)) @interface NotificationName
@property (class, readonly) NSNotificationName NSApplicationDidFinishLaunching;
@end
@implementation NotificationName
+ (NSNotificationName)NSApplicationDidFinishLaunching {
return NSApplicationDidFinishLaunchingNotification;
}
@end
&lt;/code>&lt;/pre>
&lt;h2 id="function-attributes">Function Attributes&lt;/h2>
&lt;h3 id="overloadable">&lt;code>overloadable&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>overloadable&lt;/code>&lt;/td>
&lt;td>&lt;code>clang::overloadable&lt;/code>&lt;/td>
&lt;td>&lt;code>clang::overloadable&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Clang 为 C 引入了和 C++ 一样的 &lt;code>name mangling&lt;/code>，使用 &lt;code>overloadable&lt;/code> 对 C 函数进行 &lt;code>overload&lt;/code>。&lt;/p>
&lt;pre>&lt;code class="language-c">#include &amp;lt;math.h&amp;gt;
float __attribute__((overloadable)) tgsin(float x) {
return sinf(x);
}
double __attribute__((overloadable)) tgsin(double x) {
return sin(x);
}
long double __attribute__((overloadable)) tgsin(long double x) {
return sinl(x);
}
&lt;/code>&lt;/pre>
&lt;p>会得到类似于 &lt;code>_Z5tgsinf&lt;/code>、&lt;code>_Z5tgsind&lt;/code>、&lt;code>_Z5tgsine&lt;/code> 这三个符号，同样对于 ObjC Type。&lt;/p>
&lt;pre>&lt;code class="language-objc">#import &amp;lt;Foundation/Foundation.h&amp;gt;
void __attribute__((overloadable)) detectTypeof(NSInteger i) {
fprintf(stdout, &amp;quot;%s\n&amp;quot;, @encode(typeof(i)));
}
void __attribute__((overloadable)) detectTypeof(CGFloat f) {
fprintf(stdout, &amp;quot;%s\n&amp;quot;, @encode(typeof(f)));
}
void __attribute__((overloadable)) detectTypeof(NSString *string) {
fprintf(stdout, &amp;quot;%s: NSString\n&amp;quot;, @encode(typeof(string)));
}
void __attribute__((overloadable)) detectTypeof(NSArray *array) {
fprintf(stdout, &amp;quot;%s: NSArray\n&amp;quot;, @encode(typeof(array)));
}
void __attribute__((overloadable)) detectTypeof(NSObject *object) {
fprintf(stdout, &amp;quot;%s: NSObject\n&amp;quot;, @encode(typeof(object)));
}
int main(int argc, const char * argv[]) {
detectTypeof((NSInteger)1);
detectTypeof(1.0);
detectTypeof(@&amp;quot;Hello&amp;quot;);
detectTypeof(@[@(1)]);
detectTypeof(NSObject.new);
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>运行结果如下所示。&lt;/p>
&lt;pre>&lt;code class="language-bash">q
d
@: NSString
@: NSArray
@: NSObject
&lt;/code>&lt;/pre>
&lt;h2 id="customizing-swift-import">Customizing Swift Import&lt;/h2>
&lt;h3 id="swift_bridge">&lt;code>swift_bridge&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>swift_bridge&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>swift_bridge&lt;/code> 用于将 ObjC 的声明和 Swift 类型进行 Bridge，为 Swift Interoperability 的体现，更多可以参考 &lt;a href="https://developer.apple.com/videos/play/wwdc2015/401/" target="_blank" rel="noopener">WWDC&lt;/a>。Swift 标准库中的相当一部分类型都有 Interoperability 特性，与 Cocoa 有一层隐式 bridge，比如 &lt;code>NSArray&lt;/code>、&lt;code>NSMutableArray&lt;/code> 和 &lt;code>Swift.Array&lt;/code>。&lt;/p>
&lt;p>下方例子中，ObjC 类 &lt;code>DerivatedObjCClass&lt;/code> 被 bridge 到 Swift 中的 &lt;code>DerivatedClass&lt;/code>。&lt;/p>
&lt;pre>&lt;code>__attribute__((objc_root_class))
@interface BaseClass
- (instancetype)init;
@end
__attribute__((__swift_bridge__(&amp;quot;DerivatedClass&amp;quot;)))
@interface DerivatedObjCClass: BaseClass
@end
&lt;/code>&lt;/pre>
&lt;p>更多相关内容可以参考 LLVM 的 Phab Review D87532 &lt;a href="https://reviews.llvm.org/D87532" target="_blank" rel="noopener">Sema: add support for &lt;code>__attribute__((__swift_bridge__))&lt;/code>&lt;/a> 以及 swift 的 &lt;a href="https://github.com/apple/swift/blob/41d5e57b5586fccd4ba3823e8ac4690b7b30ec59/lib/ClangImporter/ImportType.cpp#L944" target="_blank" rel="noopener">ClangImporter&lt;/a>。&lt;/p>
&lt;h3 id="swift_bridged">&lt;code>swift_bridged&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>swift_bridged&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在 CoreFoundation 中对应 &lt;code>CF_SWIFT_BRIDGED_TYPEDEF&lt;/code>，配合 &lt;code>swift_bridge&lt;/code> 使用，用于被 &lt;code>swift_bridge&lt;/code> 描述的类型的 &lt;code>typedef&lt;/code> 类型。以 &lt;code>NSString&lt;/code> -&amp;gt; &lt;code>Swift.String&lt;/code> 为例，在 ObjC 中有如下声明：&lt;/p>
&lt;pre>&lt;code class="language-objc">@interface NSString;
typedef NSString *AliasedString __attribute__((__swift_bridged_typedef__));
extern void foo(AliasedString _Nonnull str);
&lt;/code>&lt;/pre>
&lt;p>在 Swift 中会被 Bridge 为：&lt;/p>
&lt;pre>&lt;code class="language-swift">func foo(_ str: String) -&amp;gt; Void
&lt;/code>&lt;/pre>
&lt;p>这个操作同样会由 Swift Compiler 直接完成，无需开发者手动声明。&lt;/p>
&lt;h3 id="swift_name">&lt;code>swift_name&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>swift_name&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在 CoreFoundation 中对应 &lt;code>CF_SWIFT_NAME&lt;/code>，&lt;code>swift_name&lt;/code> 为 C/ObjC 的声明提供了在 Swift 中符号名，默认情况会根据 Swift Compiler 的算法规则自动生成。&lt;/p>
&lt;pre>&lt;code>@interface NSData
- (instancetype)initWithData:(NSData *)data __attribute__((__swift_name__(&amp;quot;Data.init(_:)&amp;quot;)));
@end
void __attribute__((__swift_name__(&amp;quot;squareRoot()&amp;quot;))) sqrtf(float f);
&lt;/code>&lt;/pre>
&lt;h3 id="swift_newtype">&lt;code>swift_newtype&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GNU&lt;/th>
&lt;th>C++11&lt;/th>
&lt;th>C2x&lt;/th>
&lt;th>__declspec&lt;/th>
&lt;th>Keyword&lt;/th>
&lt;th>Pragma&lt;/th>
&lt;th>Pragma clang attribute&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>swift_newtype&lt;/code> &lt;code>swift_wrapper&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在 CoreFoundation 中对应 &lt;code>_CF_TYPED_EXTENSIBLE_ENUM&lt;/code>。&lt;/p>
&lt;h2 id="进一步了解">进一步了解&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="http://clang.llvm.org/docs/AttributeReference.html" target="_blank" rel="noopener">Attributes in Clang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html" target="_blank" rel="noopener">Attribute Syntax&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html" target="_blank" rel="noopener">Enumerator Attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.keil.com/support/man/docs/armcc/armcc_chr1359124965789.htm" target="_blank" rel="noopener">Compiler-specific Features&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://nshipster.com/__attribute__" target="_blank" rel="noopener">NSHipster __ attribute __&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>